/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        bottomesc {
            bindings = <&kp ESC>;
            key-positions = <0 11>;
        };

        caps_word {
            bindings = <&kp CLCK>;
            key-positions = <29 30>;
        };

        lang {
            bindings = <&kp LS(LEFT_ALT)>;
            key-positions = <17 18>;
        };

        prt_sc {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <5 6>;
        };

        shift {
            bindings = <&sk LSHIFT>;
            key-positions = <16 19>;
        };

        dot {
            bindings = <&dot_space_shift>;
            key-positions = <28 31>;
        };
    };

    macros {
        dot_space_shift: dot_space_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SLASH &kp SPACE &sk LSHFT>;
            label = "DOT_SPACE_SHIFT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mt LC(Z) ESC  &mt GRAVE Q  &kp W  &kp E         &kp R      &kp T          &kp Y          &kp U        &kp I        &kp O    &kp P          &mt RBKT LBKT
&kp LGUI       &kp A        &kp S  &kp D         &kp F      &kp G          &kp H          &mt RSHFT J  &kp K        &kp L    &kp SEMICOLON  &kp SQT
&kp LCTRL      &kp Z        &kp X  &kp C         &kp V      &kp B          &kp N          &kp M        &kp COMMA    &kp DOT  &kp FSLH       &tog 1
                                   &kp LEFT_ALT  &lt 1 TAB  &lt 3 SPACE    &kp BACKSPACE  &lt 2 DEL    &lt 5 ENTER
            >;
        };

        layer_1 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LC(LEFT_SHIFT)  &kp STAR           &kp N7  &kp N8  &kp N9  &kp PLUS                &kp HOME      &kp PG_DN     &kp PG_UP   &kp END        &kp LC(X)  &kp LC(S)
&kp LSHIFT          &kp LS(BACKSLASH)  &kp N4  &kp N5  &kp N6  &mt UNDERSCORE MINUS    &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      &kp LC(C)  &kp LC(F)
&kp LCTRL           &kp N0             &kp N1  &kp N2  &kp N3  &mt LS(N6) SLASH        &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &kp LC(V)  &tog 1
                                               &none   &trans  &trans                  &trans        &trans        &trans
            >;
        };

        layer_2 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC    &none                  &kp AMPERSAND  &kp STAR      &kp LEFT_PARENTHESIS  &none      &none   &trans             &trans                 &trans                &trans            &trans
&kp LCTRL  &trans                 &kp DOLLAR     &kp PERCENT   &kp LCTRL             &none      &none   &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET  &trans
&kp LSHFT  &kp RIGHT_PARENTHESIS  &kp EXCL       &kp AT        &kp HASH              &none      &none   &kp GREATER_THAN   &kp RIGHT_BRACE        &kp LEFT_BRACE        &kp LESS_THAN     &trans
                                                 &kp QUESTION  &kp COMMA             &kp DOT    &trans  &trans             &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&kp LA(K_MUTE)   &kp F5      &kp LC(LS(T))  &kp LC(T)         &kp LC(W)         &trans    &trans  &trans  &trans  &trans  &trans  &trans
&kp C_VOLUME_UP  &kp C_NEXT  &trans         &kp LC(PG_UP)     &kp LC(PG_DN)     &trans    &trans  &trans  &trans  &trans  &trans  &trans
&kp C_VOL_DN     &kp LC(F5)  &kp LC(LS(P))  &kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                            &trans            &trans            &trans    &trans  &trans  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans         &trans         &trans         &trans         &trans           &trans  &trans  &trans  &trans  &trans  &bt BT_CLR
&trans  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &trans  &trans  &trans  &trans  &trans  &trans
                                      &trans         &trans         &trans           &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        layer_3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
